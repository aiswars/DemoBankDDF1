BankProject1notes
-------------------------
2/22/2022


1.	Pom.xml dependencies
2.	Src/tets/java/ testcases, utitlities ,base,  rough, listeners
3.	Src/test/resources/excel, runner , logs, properties, executables,extentconfig
4.	Base>BaseClass.java //supr class for al the classes for all the initialization>>
1.	Webdriver
2.	Properties
3.	Logs
4.	ExtentReports
5.	DataProvider
6.	Excel
7.	Mail
5.	Also to create SetUp and TearDown methods
create new> file>> application.log and selenium.log in src/test/resources/logs folder
  lect5 check the notes on paper for adding config.properties, OR.properties files
  
6.in base class add	SetUp >> browser invoking  // properties file reading
1.	public class TestProperties {
2.	Getting browser name from config property file
project home>> System.getProperty("user.dir") 
	public void tearDown() {	if(driver!=null) {	driver.quit();
	Convert to testNG to src/test/resources> testng xml file > location src/test/resources
	//testcases.TC1Login- create a testclass in testcases pkg
	TC1Login>> 
	Inspect element>Console>$$ give css syntax
	TC1Login extends baseclass
	Run As testngSuite-testng.xml
	Refresh to get test-output folder(by testng) (target folder will be generated for maven projects which is empty till Run as Maven)
	
	logs> log4j jars in pom.xml, logs -logs userdefined, 
	log4j properties
	
	Logger >>public static Logger log = Logger.getLogger("classname or projectname"); //devpinoyLogger standard name for the logger
		public static Logger log = Logger.getLogger(BaseClass.class.getName());
		import apache.log4j.Logger;//getLogger method
	public static Logger log = Logger.get.....>>select getLogger method of Apachelog4j import apache.log4j.Logger;//getLogger method
	Add logs>> log.debug("Config file loaded !!!");
    Run As testngSuite-testng.xml
	Refresh  logs> src/test/resources/
	
	ADD>> logger object- Logger class & PropertyConfigurator/DOMCOnfigurator
	logger = Logger.getLogger("ebanking");
	PropertyConfigurator.configure("Log4j.properties");//in setUp()
	
	Apache Log4J
	-----------------------------
log4j.api	 in pom.xml
log4j-core	

used  only below one in pom.xml
<artifactId>log4j</artifactId>
<version>1.2.17</version>

Log4j.property file OR 
Log4j.xml file	
Log4j.property file in src/test/resources/properties or in  Project Home path 
logger object- Logger class & PropertyConfigurator/DOMCOnfigurator	 BaseClass.jav
log info messages	in TestCase classes 
	Log4j.property file>>Appender.File- ${current.date}_path - to get new logs files" with timestamp  instead of updating on same logs
	PropertyCOnfigurator.configure("./src/test/resources/properties/log4j.properties"); lecture 27

Log properties file to utilities
in log.properties file > give the path of logs - appenderfile
Append == false >> logs will not be appended-it will be overridden
Looger class in base class>> import GetLogger method(not class) from apache
devpinoyLogger - standard name for the logger
add logs

log.debug didnt work???????????????????????

	import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
	
	//worked 
	<!-- https://mvnrepository.com/artifact/log4j/log4j -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
OR ?? here worked above one - not given below 

		<!--link: https://logging.apache.org/log4j/2.x/maven-artifacts.html -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.14.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.14.1</version>
		</dependency>
	
	-----------------------------------------------------------------
	
	
adding assertions Assertions
	after managerlogin check the presence of add custbutton and other 2 buttons >> iselement
	isElementPresent(By by) { in base class
	use it in other testclasses - TC!Login
	

L8>> If no java doc defnition of any library try getting its depenedency to pom.xml aftert removing the java build path
eg.TestNG
(through maven actually gets the documentation as well.)
if still it not showing the java doc then go to Buldpath>configure buld path> maven dependency> select the api - eg testng > select java documentation>
clcik Edit> 
go to the testng org website> java doc link > copy the link till index.html and paste it in the Edit- above
do this for any other library!!!
	
	
	TC1Login name changed to TC1BankManagerLogin.java - change it in testng.xml file too
	Add new test case in tescases pkg>> TC2AddCustomer
	--------------------------------------------
DataProvider
---------------------------------------------------------------------
2/22/2022
Excel utility -excelreader to utitlity folder
excel file - give the classname to sheetname- to get sheetname and classname same
dependency fot poi - poi, poi ooxml, dom4j, xml beans, poi-ooxml-schemas

	Use Dataprovider
	and get data from excel sheet >>excelreader.java file in utitlities
	poi jars, poi ooxml, xml beans, dom4j
	
excel file reader utility file intilization in base class
	excel utitlity ExcelReader.java file>> object creation in baseclass   public static ExcelReader excel = new ExcelReader(the path of the testdata file as parameter -constructor);
	ExcelReader.java file //import from utitlities package
	public class TC2AddCustomer extends BaseClass {
	get the logic to work with the data read from testdata.xls
	"TC2addCustomer - excel sheetname same as Classname"
	add element locators ...driver.find..click...as per the application add cutomer>>fname,laname, postcode
	Also add a cloumn in testdata.xls/ for the alert box - after adding a customer
	
	 //data from excelsheet to dataprovider then to method parameters and directly accessing
//		driver.findElement(By.cssSelector(OR.getProperty("addCustBtn_CSS"))).click(); // OR.getProperty("addCustBtn_CSS") elementlocators are added in OR.properties file in src/test/resources/properties
//	
	
	explicit wait until alert is present declaration in base class and usage in testclass
	wait = new WebDriverWait(driver,5);//explicitwait
	//code for alert in TC2AddCustomer
	Run As testngSuite-testng.xml
	some error in col num in excel reading
-------------------------------------------------------------------------------------------	
Reporter//TestNG Reporter just import org.testng.Reporter;
 Run As testngSuite-testng.xml //to print in emailablereport.html
Reporter.log("Reporter.log: Failed test>> Screenshot link");//to print in emailablereport.html
 Reporter.log("Reporter.log  Screenshot link "); //to print in emailablereport.html
  ------------------------------------------------------------------------------------------	
ReportNG >>
 Run As testngSuite-testng.xml
		HTMLReporter> test-output> html>index.html
reportng jars, google juice jars in pom.xml
class needs to be invoked through testng listeners in testng xml file - NOT listener.javaclass file
so add <listeners> tag and the requird classnames in testng xml file-only step for reportng
htmlreporter for html report - after execution -check for html folder- index.html-lec10-can customize this html-logs>>  ReportNG -Reporter.log(..........,html,screenshots,links,..
junitxmlreporter for xml report
htmlreport>> plain text>>to view as html set a flag reportng.escape-output to false
		ReportNG - testNG report only - to get this there is a class that gets invoked only through listeners. so give that listeners in tetsng xml file
	Add ReportNG dependencies
	Add required Listeners name in <listners> tag in testng.xml file

<Suite name--
	<listeners>
      <listener class-name="org.uncommons.reportng.HTMLReporter"/>
      <listener class-name="org.uncommons.reportng.JUnitXMLReporter"/>
                                             /// <listener class-name="com.w2a.listeners.CustomListeners"/>
  </listeners>
  Run As testngSuite-testng.xml > html folder will be created inside test-output folder
		HTMLReporter> test-output> html>index.html
--------------------------------------------------------------------------------------	
	can customize the reportNG reports 
	Reporter.log("Login successfully executed"); //import testng reporter
	screenshots, links, html view...
	  Run As testngSuite-testng.xml
	  
---------------------------------------------------------------------------------------------
	
	Adding listeners
	1. create class Customlistners.java in listeners package
    2.add Customlistners.javaclass in <listners> tag in testng.xml file
	<listener class-name="com.w2a.listeners.CustomListeners"/>
	cpaturescreenshot in testUilities
	customize the methods in listneres class
	  Run As testngSuite-testng.xml

	 ------------------------------------------------------------------------------------------------- 
	  
	  
	  maven error 
	  
	  before customizing the listeners class execute the project through Mavan lifecycle - clean test
	  in pom.xml add surefireplugin> in outside dependencies/ <build><plugins>pllugin> to execute as maven test based on testng xml - the sequence 
	Also make sure the testngxml file name and path is correct in 	<suiteXmlFile>src/test/resources/runner/testngProj1.xml</suiteXmlFile>
	  if no surefireplugin in testngxml file maven execure the tests with 'test' as suffix/prefix in the name no sequenece
	  check notes
	  mvn clean delete the target folder itself
	  repeorts will be in target>surefirerepeorts>index.html (same as testng test-output/html/index.html reports this is also by testng  but the execution is through maven so in surefirereports)
	mvn test>> error - Source option 5 is no longer supported. Use 7 or later.
[ERROR] Target option 5 is no longer supported. Use 7 or later.
add the below properties in pom.xml file add this outside your <dependencies> tag:
</properties>
	 <properties>
     <maven.compiler.source>1.8</maven.compiler.source>
     <maven.compiler.target>1.8</maven.compiler.target>
</properties>
-------------------------------------------------------------------------------------	
Adding listeners
	1. create class Customlistners.java in listeners package
    2.add Customlistners.javaclass in <listners> tag in testng.xml file
	
listners.java in listeners package
	listners.java <listners> tag in testng.xml file
	<listener class-name="com.w2a.listeners.CustomListeners"/>
	cpaturescreenshot in testUilities
	customize the methods in listneres class
	  Run As testngSuite-testng.xml

in listener.java first give  implements ITestListener interface
public class CustomListeners implements ITestListener{  //hover classname and select add unimplemented methods to get all the methods of this interface to the class
 <listener class-name="com.w2a.listeners.CustomListeners"/>
  in listener.java add
	  Reporter.log..logs in ontestfailure(){//to get dscfeenshots on failure of tests--to check these make a test fail- assert.fail("a failed test")
	  add logs in ontestsuccess()
--------------------------------------------------------------------------------------
2/22/2022

lecture 21
dataprovider with hashtable -- changes in the code 
no dataprovider name just the getmethod name only

//data from excelsheet to dataprovider storig to hashtable then to method parameters as hashtable
//data from excelsheet to dataprovider then to method parameters and directly accessing - no hashtable - variabls as parameters
//		driver.findElement(By.cssSelector(OR.getProperty("addCustBtn_CSS"))).click(); // OR.getProperty("addCustBtn_CSS") elementlocators are added in OR.properties file in src/test/resources/properties
//	
----------------------------------------------------------


l12
cpaturescreenshot in TestUtil.java extends base class
scrrenshots in>> targets/surefirereports/html/...
in listeneres.java class >> testutil.capturescreenshot();
Run As Maven --target
Run As testngSuite-testng.xml>>test-output

l14 extent reports
 extentmangaer.java class file
configuration fiel -reportsconfig.xml in src/test/resources/extentconfig folder	
	extentmanager.java for the extentreports
	
	
	1.extentMangaer and listener.javaclass in one package-extentlisteners package project8
	2. extentmanger for repeots, screenshots
	or 
	1. exyentmanager in utilities package 
	2. listeners.javaclass in listeners package--project1
	3. extentmanager for reports only
	4. screenshots in base class - so extends baseclass in listeners.javaclass
	  //screenshots i in Test.util class - isteners.javaclass ??
	makesure the  listener.javaclass is in testngxml file <listeners> tag	
		
	Run As testngSuite-testng.xml >>a new folder- reports will be generated with html report with timestamp
Run As maven ??-
 maven Reports>> target/surefirereports/html/extent
==============================
code optimization in base class
for clciking element
to sendkeys to element
Run As testngSuite-testng.xml 
run as maven ??

in baseclass add common functions to reuse in other testclasses
	public void click(String locator) {
	public void type(String locator, String value) {

================================================
dataprovider name - dp
changes in code- Method m for methods in classes
didnt work this -- null in locator >> check the locator varibale names in OR.properties with the code --alert ok button is not clicked- so all usernames are adding together--
==============================================

added third testcase- addcustomeraccount
dataprovider common for 2 tests in TestUtil.java class
dataprovider name - dp
in testcase class- @Test(dataProviderClass = TestUtil.class, dataProvider = "dp")
changes in code- Method m for methods in classes

testng2Proj1.xml
	Run As testngSuite-testng.xml testng2Proj1.xml - extent reports genrated
	try run maven
-0--------------------------------------------------

Setting up Runmodes - in new excel sheet
Adding Runmodes lecture 17

RunModes- to control the tests to run by datadriven -excel
RunModes Y/N to select the testcases to run or not- by adding a new sheet in excel for this
testname sin one column and one column for runmode with  Y/N
and handle this in listeners.javaclass - onTestSatart()-add code 
sheetnames - same as classnames
as per application third test usrname should feom the drop down - already added user name
	a utility in TestUtil.java for this - isTestRunnable()
	Run As testngSuite-testng.xml testng2Proj1.xml
	
	
	lecture 17 .. 3rd testcase didnt execute - code updated in TC3OpenAccount - and its worked
	//runmode in excel sheetname tc3OpenAccount >> - listener.java-onTestStart
		//now runmode is No for TC3OpenAccount
		//skiping the test based on a condition so its not handling in listener onTestStart
		if(!(TestUtil.isTestRunnable("tc3OpenAccount", excel))){
			
	runmode y for 3 testcases-- total 8 tests pass
	//now runmode is No for TC3OpenAccount  - 7 tests passed - 1 skipped
	try run maven test
	
	==============================
	try testng groups!!!
	
	
	============================
	
	
	
	Setting up Runmodes testdata for parametrization
	-------------------------------
	Setting up Runmodes testdata for parametrization- along with users data in first testcase data-first sheet excel sheet
	add one more column for runmode in first sheet and update code in TC2Addcustomer.java
		for 3rd testcase tc3OpenAccount make sure the added user's name is selected in the excel sheet
	Run As testngSuite-testng.xml testng2Proj1.xml
	
	